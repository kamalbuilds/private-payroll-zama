import React, { createContext, useContext, ReactNode } from 'react';\nimport { useWallet } from '../hooks/useWallet';\nimport { WalletState } from '../types';\nimport { ethers } from 'ethers';\n\ninterface WalletContextType {\n  walletState: WalletState;\n  provider: ethers.BrowserProvider | null;\n  signer: ethers.JsonRpcSigner | null;\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  switchNetwork: (chainId: number) => Promise<void>;\n  isChainSupported: boolean;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\n  const walletHook = useWallet();\n\n  const value: WalletContextType = {\n    walletState: {\n      isConnected: walletHook.isConnected,\n      address: walletHook.address,\n      chainId: walletHook.chainId,\n      isConnecting: walletHook.isConnecting,\n      error: walletHook.error,\n    },\n    provider: walletHook.provider,\n    signer: walletHook.signer,\n    connect: walletHook.connect,\n    disconnect: walletHook.disconnect,\n    switchNetwork: walletHook.switchNetwork,\n    isChainSupported: walletHook.isChainSupported,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport const useWalletContext = (): WalletContextType => {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWalletContext must be used within a WalletProvider');\n  }\n  return context;\n};"