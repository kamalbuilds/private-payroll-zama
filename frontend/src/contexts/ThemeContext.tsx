import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\nimport { createTheme, ThemeProvider as MuiThemeProvider, Theme } from '@mui/material/styles';\nimport { CssBaseline } from '@mui/material';\n\ntype ThemeMode = 'light' | 'dark';\n\ninterface ThemeContextType {\n  mode: ThemeMode;\n  toggleTheme: () => void;\n  theme: Theme;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\n// Custom theme configuration\nconst getTheme = (mode: ThemeMode): Theme => {\n  return createTheme({\n    palette: {\n      mode,\n      primary: {\n        main: mode === 'dark' ? '#90caf9' : '#1976d2',\n        light: mode === 'dark' ? '#bbdefb' : '#42a5f5',\n        dark: mode === 'dark' ? '#64b5f6' : '#1565c0',\n      },\n      secondary: {\n        main: mode === 'dark' ? '#f48fb1' : '#dc004e',\n        light: mode === 'dark' ? '#f8bbd9' : '#e91e63',\n        dark: mode === 'dark' ? '#f06292' : '#c51162',\n      },\n      error: {\n        main: mode === 'dark' ? '#f44336' : '#d32f2f',\n      },\n      warning: {\n        main: mode === 'dark' ? '#ff9800' : '#f57c00',\n      },\n      info: {\n        main: mode === 'dark' ? '#2196f3' : '#1976d2',\n      },\n      success: {\n        main: mode === 'dark' ? '#4caf50' : '#388e3c',\n      },\n      background: {\n        default: mode === 'dark' ? '#121212' : '#fafafa',\n        paper: mode === 'dark' ? '#1d1d1d' : '#ffffff',\n      },\n      text: {\n        primary: mode === 'dark' ? '#ffffff' : '#000000',\n        secondary: mode === 'dark' ? '#b0b0b0' : '#666666',\n      },\n    },\n    typography: {\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n      h1: {\n        fontSize: '2.5rem',\n        fontWeight: 500,\n        lineHeight: 1.2,\n      },\n      h2: {\n        fontSize: '2rem',\n        fontWeight: 500,\n        lineHeight: 1.3,\n      },\n      h3: {\n        fontSize: '1.75rem',\n        fontWeight: 500,\n        lineHeight: 1.4,\n      },\n      h4: {\n        fontSize: '1.5rem',\n        fontWeight: 500,\n        lineHeight: 1.4,\n      },\n      h5: {\n        fontSize: '1.25rem',\n        fontWeight: 500,\n        lineHeight: 1.5,\n      },\n      h6: {\n        fontSize: '1.1rem',\n        fontWeight: 500,\n        lineHeight: 1.5,\n      },\n      body1: {\n        fontSize: '1rem',\n        lineHeight: 1.5,\n      },\n      body2: {\n        fontSize: '0.875rem',\n        lineHeight: 1.43,\n      },\n    },\n    components: {\n      MuiButton: {\n        styleOverrides: {\n          root: {\n            borderRadius: 8,\n            textTransform: 'none',\n            fontWeight: 500,\n          },\n        },\n      },\n      MuiCard: {\n        styleOverrides: {\n          root: {\n            borderRadius: 12,\n            boxShadow: mode === 'dark' \n              ? '0 4px 6px rgba(0, 0, 0, 0.3)'\n              : '0 4px 6px rgba(0, 0, 0, 0.1)',\n          },\n        },\n      },\n      MuiPaper: {\n        styleOverrides: {\n          root: {\n            borderRadius: 8,\n          },\n        },\n      },\n      MuiTextField: {\n        styleOverrides: {\n          root: {\n            '& .MuiOutlinedInput-root': {\n              borderRadius: 8,\n            },\n          },\n        },\n      },\n      MuiChip: {\n        styleOverrides: {\n          root: {\n            borderRadius: 16,\n          },\n        },\n      },\n      MuiAppBar: {\n        styleOverrides: {\n          root: {\n            backgroundColor: mode === 'dark' ? '#1d1d1d' : '#ffffff',\n            color: mode === 'dark' ? '#ffffff' : '#000000',\n            boxShadow: mode === 'dark'\n              ? '0 2px 4px rgba(0, 0, 0, 0.3)'\n              : '0 2px 4px rgba(0, 0, 0, 0.1)',\n          },\n        },\n      },\n    },\n    shape: {\n      borderRadius: 8,\n    },\n    spacing: 8,\n  });\n};\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [mode, setMode] = useState<ThemeMode>('light');\n\n  // Load theme preference from localStorage\n  useEffect(() => {\n    const savedMode = localStorage.getItem('themeMode') as ThemeMode;\n    if (savedMode && (savedMode === 'light' || savedMode === 'dark')) {\n      setMode(savedMode);\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setMode(prefersDark ? 'dark' : 'light');\n    }\n  }, []);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      if (!localStorage.getItem('themeMode')) {\n        setMode(e.matches ? 'dark' : 'light');\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  const toggleTheme = () => {\n    const newMode = mode === 'light' ? 'dark' : 'light';\n    setMode(newMode);\n    localStorage.setItem('themeMode', newMode);\n  };\n\n  const theme = getTheme(mode);\n\n  const value: ThemeContextType = {\n    mode,\n    toggleTheme,\n    theme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </MuiThemeProvider>\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useThemeContext = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useThemeContext must be used within a ThemeProvider');\n  }\n  return context;\n};"