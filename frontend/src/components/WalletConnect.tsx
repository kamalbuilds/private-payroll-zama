import React from 'react';\nimport {\n  Button,\n  Card,\n  CardContent,\n  Typography,\n  Box,\n  CircularProgress,\n  Alert,\n  Chip,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  AccountBalanceWallet as WalletIcon,\n  Logout as LogoutIcon,\n  Warning as WarningIcon,\n} from '@mui/icons-material';\nimport { useWalletContext } from '../contexts/WalletContext';\nimport { formatAddress } from '../utils/formatters';\nimport { SUPPORTED_CHAINS } from '../utils/constants';\n\ninterface WalletConnectProps {\n  showCard?: boolean;\n  size?: 'small' | 'medium' | 'large';\n}\n\nexport const WalletConnect: React.FC<WalletConnectProps> = ({ \n  showCard = true, \n  size = 'medium' \n}) => {\n  const {\n    walletState,\n    connect,\n    disconnect,\n    switchNetwork,\n    isChainSupported,\n  } = useWalletContext();\n\n  const getNetworkName = (chainId: number): string => {\n    switch (chainId) {\n      case SUPPORTED_CHAINS.ZAMA_DEVNET:\n        return 'Zama Devnet';\n      case SUPPORTED_CHAINS.ZAMA_TESTNET:\n        return 'Zama Testnet';\n      case SUPPORTED_CHAINS.LOCAL:\n        return 'Local Network';\n      default:\n        return `Chain ${chainId}`;\n    }\n  };\n\n  const handleNetworkSwitch = () => {\n    if (walletState.chainId && !isChainSupported) {\n      switchNetwork(SUPPORTED_CHAINS.ZAMA_DEVNET);\n    }\n  };\n\n  const ConnectedWallet = () => (\n    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n      <WalletIcon color=\"primary\" />\n      <Box>\n        <Typography variant={size === 'small' ? 'body2' : 'body1'} fontWeight={500}>\n          {formatAddress(walletState.address!)}\n        </Typography>\n        {walletState.chainId && (\n          <Box display=\"flex\" alignItems=\"center\" gap={1} mt={0.5}>\n            <Chip\n              label={getNetworkName(walletState.chainId)}\n              size=\"small\"\n              color={isChainSupported ? 'success' : 'warning'}\n              variant=\"outlined\"\n            />\n            {!isChainSupported && (\n              <Tooltip title=\"Switch to supported network\">\n                <IconButton size=\"small\" onClick={handleNetworkSwitch}>\n                  <WarningIcon color=\"warning\" fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            )}\n          </Box>\n        )}\n      </Box>\n      <Tooltip title=\"Disconnect wallet\">\n        <IconButton onClick={disconnect} size=\"small\">\n          <LogoutIcon />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n\n  const ConnectButton = () => (\n    <Button\n      variant=\"contained\"\n      startIcon={walletState.isConnecting ? <CircularProgress size={16} /> : <WalletIcon />}\n      onClick={connect}\n      disabled={walletState.isConnecting}\n      size={size}\n    >\n      {walletState.isConnecting ? 'Connecting...' : 'Connect Wallet'}\n    </Button>\n  );\n\n  const content = (\n    <Box>\n      {walletState.error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {walletState.error}\n        </Alert>\n      )}\n      \n      {!isChainSupported && walletState.isConnected && (\n        <Alert \n          severity=\"warning\" \n          sx={{ mb: 2 }}\n          action={\n            <Button size=\"small\" onClick={handleNetworkSwitch}>\n              Switch Network\n            </Button>\n          }\n        >\n          Please connect to a supported network to use the application.\n        </Alert>\n      )}\n\n      {walletState.isConnected ? <ConnectedWallet /> : <ConnectButton />}\n    </Box>\n  );\n\n  if (!showCard) {\n    return content;\n  }\n\n  return (\n    <Card sx={{ maxWidth: 400, mx: 'auto' }}>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom align=\"center\">\n          Wallet Connection\n        </Typography>\n        {content}\n      </CardContent>\n    </Card>\n  );\n};"