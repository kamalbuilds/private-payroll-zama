import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  Button,\n  Grid,\n  Alert,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  CircularProgress,\n  Divider,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Person as PersonIcon,\n} from '@mui/icons-material';\nimport { useWalletContext } from '../contexts/WalletContext';\nimport { usePayrollContract } from '../hooks/usePayrollContract';\nimport { isValidEthereumAddress, isValidAmount } from '../utils/formatters';\nimport toast from 'react-hot-toast';\n\ninterface EmployeeManagementProps {\n  onEmployeeChange?: () => void;\n}\n\nexport const EmployeeManagement: React.FC<EmployeeManagementProps> = ({ onEmployeeChange }) => {\n  const { provider, signer } = useWalletContext();\n  const { addEmployee, removeEmployee } = usePayrollContract(provider, signer);\n  \n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    address: '',\n    name: '',\n    position: '',\n    salary: '',\n  });\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.address.trim()) {\n      newErrors.address = 'Employee address is required';\n    } else if (!isValidEthereumAddress(formData.address)) {\n      newErrors.address = 'Please enter a valid Ethereum address';\n    }\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Employee name is required';\n    } else if (formData.name.trim().length < 2) {\n      newErrors.name = 'Name must be at least 2 characters';\n    }\n\n    if (!formData.position.trim()) {\n      newErrors.position = 'Position is required';\n    }\n\n    if (!formData.salary.trim()) {\n      newErrors.salary = 'Salary is required';\n    } else if (!isValidAmount(formData.salary)) {\n      newErrors.salary = 'Please enter a valid salary amount';\n    } else if (parseFloat(formData.salary) <= 0) {\n      newErrors.salary = 'Salary must be greater than 0';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleAddEmployee = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const salaryInCents = Math.round(parseFloat(formData.salary) * 100);\n      \n      const success = await addEmployee(\n        formData.address,\n        formData.name.trim(),\n        formData.position.trim(),\n        salaryInCents\n      );\n\n      if (success) {\n        toast.success('Employee added successfully!');\n        setFormData({ address: '', name: '', position: '', salary: '' });\n        setIsAddDialogOpen(false);\n        onEmployeeChange?.();\n      }\n    } catch (error: any) {\n      toast.error(error.message || 'Failed to add employee');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCloseDialog = () => {\n    if (!isLoading) {\n      setIsAddDialogOpen(false);\n      setFormData({ address: '', name: '', position: '', salary: '' });\n      setErrors({});\n    }\n  };\n\n  return (\n    <Box>\n      {/* Add Employee Card */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <PersonIcon color=\"primary\" sx={{ mr: 2 }} />\n                <Typography variant=\"h6\">\n                  Add New Employee\n                </Typography>\n              </Box>\n              <Typography variant=\"body2\" color=\"text.secondary\" mb={3}>\n                Add a new employee to the payroll system. Their salary will be encrypted automatically.\n              </Typography>\n              <Button\n                variant=\"contained\"\n                startIcon={<AddIcon />}\n                onClick={() => setIsAddDialogOpen(true)}\n                fullWidth\n              >\n                Add Employee\n              </Button>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Employee Management\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\n                Manage your workforce with encrypted salary protection.\n              </Typography>\n              <Divider sx={{ my: 2 }} />\n              <Typography variant=\"body2\">\n                • Salaries are encrypted using FHE<br />\n                • Only employees can decrypt their own data<br />\n                • Full audit trail maintained<br />\n                • GDPR compliant operations\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Add Employee Dialog */}\n      <Dialog \n        open={isAddDialogOpen} \n        onClose={handleCloseDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          Add New Employee\n        </DialogTitle>\n        <DialogContent>\n          <Box sx={{ pt: 1 }}>\n            <TextField\n              label=\"Employee Wallet Address\"\n              fullWidth\n              value={formData.address}\n              onChange={(e) => handleInputChange('address', e.target.value)}\n              error={!!errors.address}\n              helperText={errors.address || 'The employee\\'s Ethereum wallet address'}\n              margin=\"normal\"\n              placeholder=\"0x...\"\n            />\n            \n            <TextField\n              label=\"Full Name\"\n              fullWidth\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              error={!!errors.name}\n              helperText={errors.name || 'Employee\\'s full name'}\n              margin=\"normal\"\n            />\n            \n            <TextField\n              label=\"Position/Title\"\n              fullWidth\n              value={formData.position}\n              onChange={(e) => handleInputChange('position', e.target.value)}\n              error={!!errors.position}\n              helperText={errors.position || 'Job title or position'}\n              margin=\"normal\"\n            />\n            \n            <TextField\n              label=\"Monthly Salary (USD)\"\n              fullWidth\n              value={formData.salary}\n              onChange={(e) => handleInputChange('salary', e.target.value)}\n              error={!!errors.salary}\n              helperText={errors.salary || 'Monthly salary amount in USD'}\n              margin=\"normal\"\n              type=\"number\"\n              inputProps={{ min: 0, step: 0.01 }}\n            />\n\n            <Alert severity=\"info\" sx={{ mt: 2 }}>\n              The salary amount will be encrypted using Fully Homomorphic Encryption (FHE) \n              before being stored on the blockchain. Only the employee will be able to decrypt \n              and view their salary information.\n            </Alert>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={handleCloseDialog} \n            disabled={isLoading}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleAddEmployee}\n            variant=\"contained\"\n            disabled={isLoading}\n            startIcon={isLoading ? <CircularProgress size={16} /> : <AddIcon />}\n          >\n            {isLoading ? 'Adding...' : 'Add Employee'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};"