import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Tooltip,\n  CircularProgress,\n  Chip,\n  Alert,\n} from '@mui/material';\nimport {\n  Lock as LockIcon,\n  LockOpen as LockOpenIcon,\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n  Refresh as RefreshIcon,\n} from '@mui/icons-material';\nimport { EncryptedValue } from '../types';\nimport { formatCurrency } from '../utils/formatters';\nimport { useEncryption } from '../hooks/useEncryption';\nimport { useWalletContext } from '../contexts/WalletContext';\n\ninterface EncryptedDataDisplayProps {\n  encryptedValue: EncryptedValue;\n  label?: string;\n  variant?: 'currency' | 'number' | 'text';\n  currency?: string;\n  size?: 'small' | 'medium' | 'large';\n  showToggle?: boolean;\n  autoDecrypt?: boolean;\n  placeholder?: string;\n}\n\nexport const EncryptedDataDisplay: React.FC<EncryptedDataDisplayProps> = ({\n  encryptedValue,\n  label,\n  variant = 'currency',\n  currency = 'USD',\n  size = 'medium',\n  showToggle = true,\n  autoDecrypt = false,\n  placeholder = '••••••••',\n}) => {\n  const [isVisible, setIsVisible] = useState(autoDecrypt);\n  const [decryptedValue, setDecryptedValue] = useState<number | null>(null);\n  const [isDecrypting, setIsDecrypting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const { decryptValue } = useEncryption();\n  const { walletState } = useWalletContext();\n\n  const canDecrypt = encryptedValue.canDecrypt && walletState.address;\n\n  useEffect(() => {\n    if (isVisible && canDecrypt && !decryptedValue && !isDecrypting) {\n      handleDecrypt();\n    }\n  }, [isVisible, canDecrypt]);\n\n  const handleDecrypt = async () => {\n    if (!canDecrypt || !walletState.address || isDecrypting) return;\n\n    setIsDecrypting(true);\n    setError(null);\n\n    try {\n      const result = await decryptValue(encryptedValue.data, walletState.address);\n      setDecryptedValue(Number(result));\n    } catch (err: any) {\n      setError(err.message || 'Failed to decrypt value');\n      setIsVisible(false);\n    } finally {\n      setIsDecrypting(false);\n    }\n  };\n\n  const toggleVisibility = () => {\n    if (!canDecrypt) return;\n    setIsVisible(!isVisible);\n  };\n\n  const refreshDecryption = () => {\n    setDecryptedValue(null);\n    setError(null);\n    if (isVisible && canDecrypt) {\n      handleDecrypt();\n    }\n  };\n\n  const formatValue = (value: number): string => {\n    switch (variant) {\n      case 'currency':\n        return formatCurrency(value, currency);\n      case 'number':\n        return value.toLocaleString();\n      case 'text':\n      default:\n        return value.toString();\n    }\n  };\n\n  const getDisplayValue = (): React.ReactNode => {\n    if (!canDecrypt) {\n      return (\n        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n          <LockIcon \n            color=\"disabled\" \n            fontSize={size === 'small' ? 'small' : 'medium'} \n          />\n          <Typography \n            variant={size === 'small' ? 'body2' : 'body1'} \n            color=\"text.disabled\"\n          >\n            Encrypted\n          </Typography>\n        </Box>\n      );\n    }\n\n    if (!isVisible) {\n      return (\n        <Typography \n          variant={size === 'small' ? 'body2' : 'body1'}\n          sx={{ fontFamily: 'monospace' }}\n        >\n          {placeholder}\n        </Typography>\n      );\n    }\n\n    if (isDecrypting) {\n      return (\n        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n          <CircularProgress size={16} />\n          <Typography \n            variant={size === 'small' ? 'body2' : 'body1'} \n            color=\"text.secondary\"\n          >\n            Decrypting...\n          </Typography>\n        </Box>\n      );\n    }\n\n    if (error) {\n      return (\n        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n          <Typography \n            variant={size === 'small' ? 'body2' : 'body1'} \n            color=\"error\"\n          >\n            Decryption failed\n          </Typography>\n          <Tooltip title=\"Retry decryption\">\n            <IconButton size=\"small\" onClick={refreshDecryption}>\n              <RefreshIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      );\n    }\n\n    if (decryptedValue !== null) {\n      return (\n        <Typography \n          variant={size === 'small' ? 'body2' : 'body1'}\n          fontWeight={500}\n          color=\"text.primary\"\n        >\n          {formatValue(decryptedValue)}\n        </Typography>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <Box>\n      {label && (\n        <Box display=\"flex\" alignItems=\"center\" gap={1} mb={0.5}>\n          <Typography variant=\"caption\" color=\"text.secondary\">\n            {label}\n          </Typography>\n          <Chip\n            label={encryptedValue.isEncrypted ? 'Encrypted' : 'Plaintext'}\n            size=\"small\"\n            variant=\"outlined\"\n            color={encryptedValue.isEncrypted ? 'primary' : 'default'}\n            icon={encryptedValue.isEncrypted ? <LockIcon /> : <LockOpenIcon />}\n          />\n        </Box>\n      )}\n      \n      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n        {getDisplayValue()}\n        \n        {showToggle && canDecrypt && (\n          <Tooltip title={isVisible ? 'Hide value' : 'Show value'}>\n            <IconButton size=\"small\" onClick={toggleVisibility}>\n              {isVisible ? (\n                <VisibilityOffIcon fontSize=\"small\" />\n              ) : (\n                <VisibilityIcon fontSize=\"small\" />\n              )}\n            </IconButton>\n          </Tooltip>\n        )}\n        \n        {isVisible && decryptedValue !== null && (\n          <Tooltip title=\"Refresh value\">\n            <IconButton size=\"small\" onClick={refreshDecryption}>\n              <RefreshIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        )}\n      </Box>\n      \n      {error && (\n        <Alert severity=\"error\" sx={{ mt: 1 }}>\n          {error}\n        </Alert>\n      )}\n    </Box>\n  );\n};"